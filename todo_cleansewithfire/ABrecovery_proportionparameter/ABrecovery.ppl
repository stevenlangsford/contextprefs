
var countlist = function(n){
    var countdown = function(n){//So ugly! But if you're gonna use this as an index, it makes more sense/keeps correct correspondances in count-up order.
	if(n<=0) return [];
	return [n-1].concat(countdown(n-1));
    }
    countdown(n).reverse()
}
var max = function(arr){reduce(function(a,b){if(a>b)return a; else return b;},arr[0],arr)};
var hm_ppnts = max(map(function(arow){arow["ppntid"]},datadf))+1; //ASSUMING ids start from 0. This set of helpers is only used to construct the return values from mem-d functions by walking through a countlist of ppntids.

var ordobs_singlestatus = function(a,b,tolerance,orderr){
    if(flip(orderr)) return categorical({vs:["<","=",">"],ps:[1,1,1]});
    if(Math.abs(a-b)<tolerance) return "=";
    if(a>b) return ">";
    if(a<b) return "<";
};

var ordobs_distribution = function(a,b,tolerance,orderr){
    return Enumerate(function(){
	if(flip(orderr)) return categorical({vs:["<","=",">"],ps:[1,1,1]});
	if(Math.abs(a-b)<tolerance) return "=";
	if(a>b) return ">";
	if(a<b) return "<";
    });
};


var recoverAgents = function(){
    var getBweight = mem(function(ppntid){
	return beta({a:2,b:2}); //in range 0 to 1, a mildish tendency towards .5
    });
    
    var getcalcsd = mem(function(ppntid){
	return 1; //TODO recover this too (for now check it matches sim val?)
    });
    
    var gettolerance = mem(function(ppntid){
	return 1;//Maybe this can stay fixed... but TODO think about what value it should be!
    });
    
    var getorderr = mem(function(ppntid){
	return 0.01;
    });

    var getvalue = function(A,B,ppntid){//rule for combining features
	return	(1-getBweight(ppntid))*A+getBweight(ppntid)*B;
    }

    var choicefn = function(arow){
	//	console.log("choosing for "+arow.rowname);//progress marker (time-expensive, delete asap)
	
	var choicedistribution = function(){
	    var Aest = repeat(3,function(){return uniform({a:0,b:10});});
	    var Best = repeat(3,function(){return uniform({a:0,b:10});});
	    
	    var calc1 = gaussian({mu:getvalue(arow.attributeA_option1,arow.attributeB_option1,arow.ppntid),sigma:getcalcsd(arow.ppntid)});
	    observe(Gaussian({mu:getvalue(Aest[0],Best[0],arow.ppntid),sigma:getcalcsd(arow.ppntid)}),calc1);
	    var calc2 = gaussian({mu:getvalue(arow.attributeA_option2,arow.attributeB_option2,arow.ppntid),sigma:getcalcsd(arow.ppntid)});
	    observe(Gaussian({mu:getvalue(Aest[1],Best[1],arow.ppntid),sigma:getcalcsd(arow.ppntid)}),calc2);
	    var calc3 = gaussian({mu:getvalue(arow.attributeA_option3,arow.attributeB_option3,arow.ppntid),sigma:getcalcsd(arow.ppntid)});
	    observe(Gaussian({mu:getvalue(Aest[2],Best[2],arow.ppntid),sigma:getcalcsd(arow.ppntid)}),calc3);

	    var ordA_12 = ordobs_singlestatus(arow.attributeA_option1,arow.attributeA_option2,gettolerance(arow.ppntid), getorderr(arow.ppntid));
	    observe(ordobs_distribution(Aest[0],Aest[1], gettolerance(arow.ppntid), getorderr(arow.ppntid)),ordA_12);
	    var ordA_13 = ordobs_singlestatus(arow.attributeA_option1,arow.attributeA_option3,gettolerance(arow.ppntid), getorderr(arow.ppntid));
	    observe(ordobs_distribution(Aest[0],Aest[2], gettolerance(arow.ppntid), getorderr(arow.ppntid)),ordA_13);
	    var ordA_23 = ordobs_singlestatus(arow.attributeA_option2,arow.attributeA_option3,gettolerance(arow.ppntid), getorderr(arow.ppntid));
	    observe(ordobs_distribution(Aest[1],Aest[2], gettolerance(arow.ppntid), getorderr(arow.ppntid)),ordA_23);

	    var ordB_12 = ordobs_singlestatus(arow.attributeB_option1,arow.attributeB_option2,gettolerance(arow.ppntid), getorderr(arow.ppntid));
	    observe(ordobs_distribution(Best[0],Best[1], gettolerance(arow.ppntid), getorderr(arow.ppntid)),ordB_12);
	    var ordB_13 = ordobs_singlestatus(arow.attributeB_option1,arow.attributeB_option3,gettolerance(arow.ppntid), getorderr(arow.ppntid));
	    observe(ordobs_distribution(Best[0],Best[2], gettolerance(arow.ppntid), getorderr(arow.ppntid)),ordB_13);
	    var ordB_23 = ordobs_singlestatus(arow.attributeB_option2,arow.attributeB_option3,gettolerance(arow.ppntid), getorderr(arow.ppntid));
	    observe(ordobs_distribution(Best[1],Best[2], gettolerance(arow.ppntid), getorderr(arow.ppntid)),ordB_23);
	    
	    var estvalues = [getvalue(Aest[0],Best[0],arow.ppntid),
			     getvalue(Aest[1],Best[1],arow.ppntid),
			     getvalue(Aest[2],Best[2],arow.ppntid)];

	    //softmax choice rule on inferred value
	    var sumexp = reduce(function(a,b){return a+b;},0,map(function(x){return Math.exp(x);},estvalues));
	    var p_choice = map(function(x){return Math.exp(x)/sumexp;},estvalues);
	    var choicedist = categorical({vs:[1,2,3],ps:p_choice});
	    //log estimates:
	    if(flip(.5)){
		json.write('logs/test'+randomInteger(9999)+'.json', {
		    ppntid:arow.ppntid,
		    myBweight:getBweight(arow.ppntid),
		    simBweight:arow.Bweight,
		    simval1:arow.value1,
		    simval2:arow.value2,
		    simval3:arow.value3,
		    myval1:Aest[0]+getBweight(arow.ppntid)*Best[0],
		    myval2:Aest[1]+getBweight(arow.ppntid)*Best[1],
		    myval3:Aest[2]+getBweight(arow.ppntid)*Best[2],
		    mychoice:choicedist,//sample(choicedist),
		    simchoice:arow.choice,
		    oraclechoice:arow.oraclechoice,
		    myA1:Aest[0],
		    myA2:Aest[1],
		    myA3:Aest[2],
		    myB1:Best[0],
		    myB2:Best[1],
		    myB3:Best[2],
		    simA1:arow["attributeA_option1"],
		    simA2:arow["attributeA_option2"],
		    simA3:arow["attributeA_option3"],
		    simB1:arow["attributeB_option1"],
		    simB2:arow["attributeB_option2"],
		    simB3:arow["attributeB_option3"]
		});}
	    //end log
	    return choicedist;
	};
	observe(Infer({method:'MCMC',samples:1000,burn:50,model:choicedistribution}),arow.choice);//choicedistribution return value is 'small-c' sample.
	//observe(choicedistribution(),arow.choice); //choicedistribution return value is 'cap-C' distribution.
    };//end get choice
    map(choicefn,datadf);
    return map(getBweight,countlist(hm_ppnts));
}//end recoveragents

Infer({method:'MCMC',kernel:'HMC',samples:1000,burn:100,model:recoverAgents})
