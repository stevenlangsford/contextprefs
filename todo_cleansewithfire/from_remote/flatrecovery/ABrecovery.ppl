
var countlist = function(n){
    var countdown = function(n){//So ugly! But if you're gonna use this as an index, it makes more sense in count-up order.
	if(n<=0) return [];
	return [n-1].concat(countdown(n-1));
    }
    countdown(n).reverse()
}
var max = function(arr){reduce(function(a,b){if(a>b)return a; else return b;},arr[0],arr)};
var hm_ppnts = max(map(function(arow){arow["ppntid"]},datadf))+1; //ASSUMING ids start from 0. This set of helpers is only used to construct the return values from mem-d functions by walking through a countlist of ppntids.


var recoverAgents = function(){

    var getBweight = mem(function(ppntid){
	return uniform({a:0,b:10});
    });

    var getcalcsd = mem(function(ppntid){
	return 1; //TODO recover this too (for now check it matches sim val?)
    })

    var gettolerance = mem(function(ppntid){
	return 1;//Maybe this can stay fixed... but TODO think about what value it should be!
    });

    var getorderr = mem(function(ppntid){
	return 0.01;
    });
    
    var ordobs_singlestatus = function(a,b,tolerance,orderr){
	if(flip(orderr)) return categorical({vs:["<","=",">"],ps:[1,1,1]});
	if(Math.abs(a-b)<tolerance) return "=";
	if(a>b) return ">";
	if(a<b) return "<";
    }
    
    var ordobs_distribution = function(a,b,tolerance,orderr){
	return Enumerate(function(){
	    if(flip(orderr)) return categorical({vs:["<","=",">"],ps:[1,1,1]});
	    if(Math.abs(a-b)<tolerance) return "=";
	    if(a>b) return ">";
	    if(a<b) return "<";
	});
    }
    
    var observefn = function(arow){
//	console.log("observing"+arow.rowname);//progress marker (time-expensive, delete asap)
	
	var Aest = repeat(3,function(){uniform({a:0,b:10})});
	var Best = repeat(3,function(){uniform({a:0,b:10})});
	
	var calc1 = gaussian({mu:arow.attributeA_option1+arow.attributeB_option1*getBweight(arow.ppntid),sigma:getcalcsd(arow.ppntid)});
	observe(Gaussian({mu:Aest[0]+Best[0]*getBweight(arow.ppntid),sigma:getcalcsd(arow.ppntid)}),calc1);
	var calc2 = gaussian({mu:arow.attributeA_option2+arow.attributeB_option2*getBweight(arow.ppntid),sigma:getcalcsd(arow.ppntid)});
	observe(Gaussian({mu:Aest[1]+Best[1]*getBweight(arow.ppntid),sigma:getcalcsd(arow.ppntid)}),calc2);
	var calc3 = gaussian({mu:arow.attributeA_option3+arow.attributeB_option3*getBweight(arow.ppntid),sigma:getcalcsd(arow.ppntid)});
	observe(Gaussian({mu:Aest[2]+Best[2]*getBweight(arow.ppntid),sigma:getcalcsd(arow.ppntid)}),calc3);

	var ordA_12 = ordobs_singlestatus(arow.attributeA_option1,arow.attributeA_option2,gettolerance(arow.ppntid), getorderr(arow.ppntid));
	observe(ordobs_distribution(Aest[0],Aest[1], gettolerance(arow.ppntid), getorderr(arow.ppntid)),ordA_12);
	var ordA_13 = ordobs_singlestatus(arow.attributeA_option1,arow.attributeA_option3,gettolerance(arow.ppntid), getorderr(arow.ppntid));
	observe(ordobs_distribution(Aest[0],Aest[2], gettolerance(arow.ppntid), getorderr(arow.ppntid)),ordA_13);
	var ordA_23 = ordobs_singlestatus(arow.attributeA_option2,arow.attributeA_option3,gettolerance(arow.ppntid), getorderr(arow.ppntid));
	observe(ordobs_distribution(Aest[1],Aest[2], gettolerance(arow.ppntid), getorderr(arow.ppntid)),ordA_23);

	var ordB_12 = ordobs_singlestatus(arow.attributeB_option1,arow.attributeB_option2,gettolerance(arow.ppntid), getorderr(arow.ppntid));
	observe(ordobs_distribution(Best[0],Best[1], gettolerance(arow.ppntid), getorderr(arow.ppntid)),ordB_12);
	var ordB_13 = ordobs_singlestatus(arow.attributeB_option1,arow.attributeB_option3,gettolerance(arow.ppntid), getorderr(arow.ppntid));
	observe(ordobs_distribution(Best[0],Best[2], gettolerance(arow.ppntid), getorderr(arow.ppntid)),ordB_13);
	var ordB_23 = ordobs_singlestatus(arow.attributeB_option2,arow.attributeB_option3,gettolerance(arow.ppntid), getorderr(arow.ppntid));
	observe(ordobs_distribution(Best[1],Best[2], gettolerance(arow.ppntid), getorderr(arow.ppntid)),ordB_23);
	
	var estvalues = [Aest[0]+Best[0]*getBweight(arow.ppntid),
			 Aest[1]+Best[1]*getBweight(arow.ppntid),
			 Aest[2]+Best[2]*getBweight(arow.ppntid)]

	//softmax choice rule on inferred value
	var sumexp = reduce(function(a,b){a+b},0,map(function(x){Math.exp(x)},estvalues));
	var p_choice = map(function(x){Math.exp(x)/sumexp},estvalues);
	observe(Categorical({vs:[1,2,3],ps:p_choice}),arow.choice);	
	//no return value:  mem(getBweight(ppntid){...}) now informed by a bunch of observations
	if(flip(0.1))json.write('logs/test'+randomInteger(1000)+'.json', {
	    row:arow.rowname,
	    ppnt:arow.ppntid,
	    estA1:Aest[0],
	    estA2:Aest[1],
	    estA3:Aest[2],
	    estB1:Best[0],
	    estB2:Best[1],
	    estB3:Best[2],
	    simA1:arow.attributeA_option1,
	    simA2:arow.attributeA_option2,
	    simA3:arow.attributeA_option3,
	    simB1:arow.attributeB_option1,
	    simB2:arow.attributeB_option2,
	    simB3:arow.attributeB_option3,
	    estBweight:getBweight(arow.ppntid),
	    simBweight:arow.Bweight
	});
    }//end observe
    
    map(observefn,datadf);
	       
    return map(getBweight,countlist(hm_ppnts));
}

Infer({method:'MCMC',samples:1500,burn:100,kernel:'MH',model:recoverAgents});
//Infer({method:'SMC',particles:1500,rejuv:5,model:recoverAgents});
