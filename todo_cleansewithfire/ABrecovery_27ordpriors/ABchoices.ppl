var tolerance = .01;
var orderr = .01;

var condprior = function(obs){
    var ordrelation = function(a,b){
	return Enumerate(function(){
	    if(flip(orderr)) return categorical({vs:["<","=",">"],ps:[1,1,1]});
	    if(Math.abs(a-b)<tolerance) return "=";
	    if(a>b) return ">";
	    if(a<b) return "<";
	});
    }
    var modpriors = function(){
	var prior = Uniform({a:0,b:10});//Gaussian({mu:0,sigma:1})//Beta({a:1,b:1});
	var stim = repeat(3,function(){sample(prior)});
	observe(ordrelation(stim[0],stim[1]),obs[0]);
	observe(ordrelation(stim[0],stim[2]),obs[1]);
	observe(ordrelation(stim[1],stim[2]),obs[2]);
	return stim;
    }

    return Infer({method:'MCMC',samples:3500,burn:500,lag:2,model:modpriors});// boost ye samples: you can afford it
}

var ordoutcome_condpriors = {
    "<<<":condprior(["<","<","<"]),
    "<<=":condprior(["<","<","="]),
    "<<>":condprior(["<","<",">"]),
    "<=<":condprior(["<","=","<"]),
    "<==":condprior(["<","=","="]),
    "<=>":condprior(["<","=",">"]),
    "<><":condprior(["<",">","<"]),
    "<>=":condprior(["<",">","="]),
    "<>>":condprior(["<",">",">"]),
    "=<<":condprior(["=","<","<"]),
    "=<=":condprior(["=","<","="]),
    "=<>":condprior(["=","<",">"]),
    "==<":condprior(["=","=","<"]),
    "===":condprior(["=","=","="]),
    "==>":condprior(["=","=",">"]),
    "=><":condprior(["=",">","<"]),
    "=>=":condprior(["=",">","="]),
    "=>>":condprior(["=",">",">"]),
    "><<":condprior([">","<","<"]),
    "><=":condprior([">","<","="]),
    "><>":condprior([">","<",">"]),
    ">=<":condprior([">","=","<"]),
    ">==":condprior([">","=","="]),
    ">=>":condprior([">","=",">"]),
    ">><":condprior([">",">","<"]),
    ">>=":condprior([">",">","="]),
    ">>>":condprior([">",">",">"])
}


var ordstatus = function(a,b,tolerance,orderr){
    if(flip(orderr)) return categorical({vs:["<","=",">"],ps:[1,1,1]});
    if(Math.abs(a-b)<tolerance) return "=";
    if(a>b) return ">";
    if(a<b) return "<";
}

var makechoice = function(arow){
    var decisiondist = function(){
    var Aest = sample(ordoutcome_condpriors[""+
				       ordstatus(arow.attributeA_option1,arow.attributeA_option2,arow.toleranceA,arow.orderr)+
				       ordstatus(arow.attributeA_option1,arow.attributeA_option3,arow.toleranceA,arow.orderr)+
				       ordstatus(arow.attributeA_option2,arow.attributeA_option3,arow.toleranceA,arow.orderr)
					     ]);
    var Best = sample(ordoutcome_condpriors[""+
				       ordstatus(arow.attributeA_option1,arow.attributeA_option2,arow.toleranceA,arow.orderr)+
				       ordstatus(arow.attributeA_option1,arow.attributeA_option3,arow.toleranceA,arow.orderr)+
				       ordstatus(arow.attributeA_option2,arow.attributeA_option3,arow.toleranceA,arow.orderr)
					     ]);

    var calc1 = gaussian({mu:arow.attributeA_option1+arow.attributeB_option1*arow.Bweight,sigma:arow.calcsd})
    var calc2 = gaussian({mu:arow.attributeA_option2+arow.attributeB_option2*arow.Bweight,sigma:arow.calcsd})
    var calc3 = gaussian({mu:arow.attributeA_option3+arow.attributeB_option3*arow.Bweight,sigma:arow.calcsd})

    observe(Gaussian({mu:Aest[0]+Best[0]*arow.Bweight,sigma:arow.calcsd}),calc1);
    observe(Gaussian({mu:Aest[1]+Best[1]*arow.Bweight,sigma:arow.calcsd}),calc2);
    observe(Gaussian({mu:Aest[2]+Best[2]*arow.Bweight,sigma:arow.calcsd}),calc3);
    

    var value1 = Aest[0]+Best[0]*arow.Bweight;
    var value2 = Aest[1]+Best[1]*arow.Bweight;
    var value3 = Aest[2]+Best[2]*arow.Bweight;

	return value1>value2&&value1>value3 ? 1 : value2>value1&&value2>value3 ? 2 : 3;
    }
    console.log("getting "+arow.rowname) ;//diag, delete
    return sample(Infer({method:'MCMC',samples:1550,burn:150,model:decisiondist}));
}

map(makechoice,datadf)
