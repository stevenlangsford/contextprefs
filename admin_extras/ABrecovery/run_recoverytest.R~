library(tidyverse)
library(rwebppl)

simexp.df <- read.csv(file="ABsimexp_withchoices.csv")%>%select(contains("attribute"),ppntid,Aweight,Bweight,contains("value"),contains("choice"))
hm_ppnts <- max(simexp.df$ppntid)+1

starttime <- Sys.time()
fit.recovery <- webppl(program_file="ABrecovery.ppl",data=simexp.df,data_var="expdf",packages=c("webppl-json"))
save(fit.recovery,file="fitrecovery.RData")
endtime <- Sys.time()
runtime <- endtime-starttime

fit.samples <- fit.recovery[[1]]

mysamples.df <- data.frame()
for(asample in 1:length(fit.samples)){
    thissample <- fit.samples[[asample]]
    for(ppnt in 1:hm_ppnts){
        mysamples.df <- rbind(mysamples.df,data.frame(ppntid=ppnt-1,
                                      Aweight=thissample[1,ppnt],
                                      Bweight=thissample[2,ppnt]
                                      ))
    }
}

save.image(file="runrecoverytest_complete.RData")

funfacts.df <- simexp.df%>%group_by(ppntid)%>%summarize(Aweight=mean(Aweight),Bweight=mean(Bweight))%>%ungroup()#lazyhack, mean==max==min==unique_value for now.
                                                  
ppntAB.plot <- ggplot(mysamples.df)+geom_histogram(aes(x=Aweight,fill="A"),alpha=.5)+
    geom_histogram(aes(x=Bweight,fill="B"),alpha=.5)+
    facet_wrap(~ppntid)+
    geom_vline(data=funfacts.df,aes(xintercept=Aweight,color="A"),size=2)+
    geom_vline(data=funfacts.df,aes(xintercept=Bweight,color="B"),size=2)+
    theme_bw()

ggsave(ppntAB.plot)
