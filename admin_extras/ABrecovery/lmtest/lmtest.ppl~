//helper functions
    var countlist = function(n){ //returns [0 ... n-1]
	var countdown = function(n){//ugly. recursion vs desire to count up instead of down.
	    if(n<=0) return [];
	    return [n-1].concat(countdown(n-1));
	}
	countdown(n).reverse()
    }

var whichmax = function(arr){ //returns index of max element (first index of tied max)
    reduce(function(i1,i2){if(arr[i1]>arr[i2])return i1; else return i2},0,countlist(arr.length))
}

//choice models:
var linear_DM_model = function(){
    var Aweight = gaussian({mu:1,sigma:1})
    var Bweight = gaussian({mu:1,sigma:1})

    var linear_eval = function(option,noise){
	return Aweight*option.a+Bweight*option.b+gaussian({mu:0,sigma:noise});
    }

    var linear_DM = function(optionlist,noise){ //take the max of linear eval results
	return  whichmax(map(function(anoption){return linear_eval(anoption,noise)},optionlist))+1 //whichmax index 0-based, choices labeled 1,2,3
    }

    var dfrow_to_optionlist = function(arow){
	return [{a:arow["A1"],b:arow["B1"]}, {a:arow["A2"],b:arow["B2"]}, {a:arow["A3"],b:arow["B3"]}]
    }
    
    var observe_row = function(arow){
	condition(linear_DM(dfrow_to_optionlist(arow),arow["sim.noise"])==arow["simchoice"])
    }
    map(observe_row,expdf)
    return [Aweight,Bweight];
}//end linear_DM model


//Infer({method:"incrementalMH",samples:1000,model:linear_DM_model})
Infer({method:"SMC",samples:1000,model:linear_DM_model})
