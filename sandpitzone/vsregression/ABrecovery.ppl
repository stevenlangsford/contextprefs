//helper functions
var countlist = function(n){
    var countdown = function(n){//So ugly! But if you're gonna use this as an index, it makes more sense/keeps correct correspondances in count-up order.
	if(n<=0) return [				];
	return [n-1].concat(countdown(n-1));
    }
    countdown(n).reverse()
}
var max = function(arr){reduce(function(a,b){if(a>b)return a; else return b;},arr[0],arr)};
var hm_ppnts = max(map(function(arow){arow["ppntid"]},expdf))+1; //ASSUMING ids start from 0. Used to construct return values from mem-d functions by walking through a countlist of ppntids.

var writelogs = false;
var logprob = 0.001;
//if(writelogs&&flip(logprob))json.write('attributeAlogs/test'+randomInteger(1000)+'.json', {writelogs:writelogs,logprob:logprob});

//MAIN WORK, this is the model passed to Infer.
var recover_agentparams = function(){

    //ppnt attributes

    //population params:
    var population_Aweight = gaussian({mu:0,sigma:1});
    var population_Bweight = gaussian({mu:0,sigma:1});
    var population_weightvariance = Math.abs(gaussian({mu:1,sigma:1}))+.1;

    //agent params fixed by assumption
    var getmy_calcsd = mem(function(ppntid){
	return 3;
	//	return Math.abs(cauchy({location:5,scale:2})); //a bit more realistic than the flip prior.
    });//actually, realistic priors for everyone! woo!
    var getmy_tolerance_attributeA = mem(function(ppntid){
	return 1;
    });
    var getmy_tolerance_attributeB = mem(function(ppntid){
	return 1;
    });
    var getmy_orderr = mem(function(ppntid){
	return 0.1
    });


    //agent params inferred:
    var getmy_attributeAweight = mem(function(ppntid){
	return gaussian({mu:population_Aweight,sigma:population_weightvariance})
    }) //return gaussian({mu:20,sigma:3})
    var getmy_attributeBweight = mem(function(ppntid){
	return gaussian({mu:population_Bweight,sigma:population_weightvariance})
    }) //Math.abs(gaussian({mu:8,sigma:2}))


    var decision_distribution = function(arow){

	var calc1 = gaussian({mu:arow["attributeA_option1"]*getmy_attributeAweight(arow["ppntid"])+arow["attributeB_option1"]*getmy_attributeBweight(arow["ppntid"]),
			      sigma:getmy_calcsd(arow["ppntid"])});
	var calc2 = gaussian({mu:arow["attributeA_option2"]*getmy_attributeAweight(arow["ppntid"])+arow["attributeB_option2"]*getmy_attributeBweight(arow["ppntid"]),
			      sigma:getmy_calcsd(arow["ppntid"])});
	var calc3 = gaussian({mu:arow["attributeA_option3"]*getmy_attributeAweight(arow["ppntid"])+arow["attributeB_option3"]*getmy_attributeBweight(arow["ppntid"]),
			      sigma:getmy_calcsd(arow["ppntid"])});
	
	
	
	var ordrelation = function(a,b,tolerance,orderr){//these args are individual values...
	    if(flip(orderr)) return categorical({vs:["<","=",">"],ps:[1,1,1]});
	    if(Math.abs(a-b)<tolerance) return "=";
	    if(a>b) return ">";
	    if(a<b) return "<";
	}
	
	var ordA_12 = ordrelation(arow["attributeA_option1"],arow["attributeA_option2"],getmy_tolerance_attributeA(arow["ppntid"]),getmy_orderr(arow["ppntid"]));
	var ordA_13 = ordrelation(arow["attributeA_option1"],arow["attributeA_option3"],getmy_tolerance_attributeA(arow["ppntid"]),getmy_orderr(arow["ppntid"]));
	var ordA_23 = ordrelation(arow["attributeA_option2"],arow["attributeA_option3"],getmy_tolerance_attributeA(arow["ppntid"]),getmy_orderr(arow["ppntid"]));

	var ordB_12 = ordrelation(arow["attributeB_option1"],arow["attributeB_option2"],getmy_tolerance_attributeB(arow["ppntid"]),getmy_orderr(arow["ppntid"]));
	var ordB_13 = ordrelation(arow["attributeB_option1"],arow["attributeB_option3"],getmy_tolerance_attributeB(arow["ppntid"]),getmy_orderr(arow["ppntid"]));
	var ordB_23 = ordrelation(arow["attributeB_option2"],arow["attributeB_option3"],getmy_tolerance_attributeB(arow["ppntid"]),getmy_orderr(arow["ppntid"]));

	// if(writelogs&&flip(logprob)){ //diag
	//     json.write('attributeAlogs/calcordobs'+randomInteger(10000)+'.json', {
	// 	calcA:calcA,
	// 	calcB:calcB,
	// 	calcC:calcC,
	// 	p_AB:p_AB,
	// 	p_AC:p_AC,
	// 	p_BC:p_BC,
	// 	v_AB:v_AB,
	// 	v_AC:v_AC,
	// 	v_BC:v_BC,
	// 	sim_pA:arow["attributeAA"],
	// 	sim_pB:arow["attributeAB"],
	// 	sim_pC:arow["attributeAC"],
	// 	sim_vA:arow["attributeBA"],
	// 	sim_vB:arow["attributeBB"],
	// 	sim_vC:arow["attributeBC"],
	// 	sim_ppntid:arow["ppntid"],
	// 	est_calcsd:getmy_calcsd(arow["ppntid"])
	//     });
	//    }//end diag
	
	var agent = function(){
	    var attributeAPrior =  uniform({a:0,b:10})//?
	    var  attributeBPrior = uniform({a:0,b:15})//whatever?

	    var my_A1 = sample(attributeAPrior);
	    var my_A2 = sample(attributeAPrior);
	    var my_A3 = sample(attributeAPrior);
	    var my_B1 = sample(attributeBPrior);
	    var my_B2 = sample(attributeBPrior);
	    var my_B3 = sample(attributeBPrior);


	    
	    observe(Gaussian({mu:my_A1*getmy_attributeAweight(arow["ppntid"])+my_B1*getmy_attributeBweight(arow["ppntid"]),sigma:getmy_calcsd(arow["ppntid"])}),calc1)
	    observe(Gaussian({mu:my_A2*getmy_attributeAweight(arow["ppntid"])+my_B2*getmy_attributeBweight(arow["ppntid"]),sigma:getmy_calcsd(arow["ppntid"])}),calc2)
	    observe(Gaussian({mu:my_A3*getmy_attributeAweight(arow["ppntid"])+my_B3*getmy_attributeBweight(arow["ppntid"]),sigma:getmy_calcsd(arow["ppntid"])}),calc3)

	    condition(ordA_12 ==ordrelation(my_A1,my_A2,getmy_tolerance_attributeA(arow["ppntid"]),getmy_orderr(arow["ppntid"])))
	    condition(ordA_13 ==ordrelation(my_A1,my_A3,getmy_tolerance_attributeA(arow["ppntid"]),getmy_orderr(arow["ppntid"])))
	    condition(ordA_23 ==ordrelation(my_A2,my_A3,getmy_tolerance_attributeA(arow["ppntid"]),getmy_orderr(arow["ppntid"])))

	    condition(ordB_12 ==ordrelation(my_B1,my_B2,getmy_tolerance_attributeB(arow["ppntid"]),getmy_orderr(arow["ppntid"])))
	    condition(ordB_13 ==ordrelation(my_B1,my_B3,getmy_tolerance_attributeB(arow["ppntid"]),getmy_orderr(arow["ppntid"])))
	    condition(ordB_23 ==ordrelation(my_B2,my_B3,getmy_tolerance_attributeB(arow["ppntid"]),getmy_orderr(arow["ppntid"])))

	    var opt1 = my_A1*getmy_attributeAweight(arow["ppntid"])+ my_B1*getmy_attributeBweight(arow["ppntid"])
	    var opt2 = my_A2*getmy_attributeAweight(arow["ppntid"])+ my_B2*getmy_attributeBweight(arow["ppntid"])
	    var opt3 = my_A3*getmy_attributeAweight(arow["ppntid"])+ my_B3*getmy_attributeBweight(arow["ppntid"])

	    //diag
	    // if(writelogs&&flip(logprob*0.1))json.write('attributeAlogs/agentEsts'+randomInteger(10000)+'.json', {
	    // 	estA:A,
	    // 	estB:B,
	    // 	estC:C,
	    // 	est_pa:my_pA,
	    // 	est_pb:my_pB,
	    // 	est_pc:my_pC,
	    // 	est_va:my_vA,
	    // 	est_vb:my_vB,
	    // 	est_vc:my_vC,
	    // 	sim_pA:arow["attributeAA"],
	    // 	sim_pB:arow["attributeAB"],
	    // 	sim_pC:arow["attributeAC"],
	    // 	sim_vA:arow["attributeBA"],
	    // 	sim_vB:arow["attributeBB"],
	    // 	sim_vC:arow["attributeBC"],
	    // 	sim_ppntid:arow["ppntid"],
	    // 	est_calcsd:getmy_calcsd(arow["ppntid"]),
	    // 	est_tolerance_attributeA:getmy_tolerance_attributeA(arow["ppntid"]),
	    // 	est_tolerance_attributeB:getmy_tolerance_attributeB(arow["ppntid"]),
	    // 	est_orderr:getmy_orderr(arow["ppntid"]),
	    // 	est_attributeBpriormean:getmy_attributeBpriormean(arow["ppntid"]),
	    // 	est_attributeBpriorsd:getmy_attributeBpriorsd(arow["ppntid"]),
	    // 	est_returnchoice:A>B&&A>C ? 1 : B>A&&B>C ? 2 : 3
	    // });
	    //end diag
	    return opt1>opt2&&opt1>opt3 ? 1 : opt2>opt1&&opt2>opt3 ? 2 : 3;
	}
	
	return Infer({method:'MCMC',samples:500,burn:20,model:agent});
    }

    var obsfunction = function(arow){
//	var my_agent = decision_distribution(arow); //don't declare and pass, when you're done printing diags, declare anonymously inside observe.

	//diag
	// if(writelogs&&flip(logprob))json.write('attributeAlogs/decisiondist'+randomInteger(1000)+'.json', {
	//     score1:my_agent.score(1),
	//     score2:my_agent.score(2),
	//     score3:my_agent.score(3),
	//     //asobj:my_agent,
	//     pA:arow["pA"],
	//     pB:arow["pB"],
	//     pC:arow["pC"],
	//     vA:arow["vA"],
	//     vB:arow["vB"],
	//     vC:arow["vC"],
	//     ppntid:arow["ppntid"],
	//     est_calcsd:getmy_calcsd(arow["ppntid"])
	// });
	//end diag
	
	observe(decision_distribution(arow), arow["choice"]);
    }//end obsfunction

    map(obsfunction,expdf)

    var ret = [map(getmy_attributeAweight,countlist(hm_ppnts)),
	       map(getmy_attributeBweight,countlist(hm_ppnts))
	      ]
    return ret;
}//end recover_agentparams


Infer({method:"SMC",particles:250,rejuvSteps:2,model:recover_agentparams}); //what impact #particles & #rejuvSteps?
