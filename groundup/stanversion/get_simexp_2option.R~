library(tidyverse)
library(rwebppl)
rm(list=ls())

##world setup
hm_ppnts <- 10;
hm_trials <- 25; #low because repeated
trialreps <- 10;
stimrange <- 1;

##ppnt setup
ppnt_calcsd <- rep(.5,hm_ppnts)
ppnt_Bweight <- seq(from=0,to=1,length=hm_ppnts)#rbeta(hm_ppnts,shape1=2,shape2=2)
ppnt_toleranceA <- rep(.01,hm_ppnts)
ppnt_toleranceB <- rep(.01,hm_ppnts)
ppnt_orderr <- rep(.1,hm_ppnts)

##stim setup
stim.df <- data.frame(
    attributeA_option1=stimrange/2,
    attributeA_option2=stimrange/2,
    attributeB_option1=seq(from=0,to=stimrange,length=hm_trials),
    attributeB_option2=stimrange/2,
    trialid=1:hm_trials
)

stim.df <- stim.df[rep(seq_len(nrow(stim.df)), trialreps), ] #creates repeats

##assign stim to ppnts
simexp.df <- data.frame();
for(i in 1:hm_ppnts){
    trialset.df <- cbind(stim.df,data.frame(ppntid=i-1,
                                                  calcsd=ppnt_calcsd[i],
                                                  Bweight=ppnt_Bweight[i],
                                                  toleranceA=ppnt_toleranceA[i],
                                                  toleranceB=ppnt_toleranceB[i],
                                                  orderr=ppnt_orderr[i]
                                              ))
 ##   browser()
    simexp.df <- rbind(simexp.df,trialset.df)
}


##Check the oracle's decisions:
getvalue <- function(a,b,ppntid){
#    browser();
    k <- ppnt_Bweight[ppntid+1] #simexp.df uses 0-indexed webppl friendly ppntids.
    return( (1-k)*a+k*b );
}

getoraclechoice <- function(options){
        which(options==max(options))[base::sample(length(which(options==max(options))),1)] #sample bs is in case of a tie.
}

for(i in 1:nrow(simexp.df)){
    simexp.df[i,"value1"]=getvalue(simexp.df[i,"attributeA_option1"],simexp.df[i,"attributeB_option1"],simexp.df[i,"ppntid"])
    simexp.df[i,"value2"]=getvalue(simexp.df[i,"attributeA_option2"],simexp.df[i,"attributeB_option2"],simexp.df[i,"ppntid"])
    simexp.df[i,"oraclechoice"]=getoraclechoice(c(simexp.df[i,"value1"],simexp.df[i,"value2"]))
}

simexp.df$rowname <- 1:nrow(simexp.df) #used only in a console.log progress bar
simexp.df$ppntid <- as.factor(simexp.df$ppntid)

## for(rep in c("")){ #in 1:10 or whatever if you want. #in c("") to turn this off (note recovery expects 'choice' with no numeral attached.
## simexp.df[paste0("choice",rep)] <- webppl(program_file="ABchoices.ppl",data=simexp.df,data_var="datadf",packages=c("webppl-json"))
## }

save.image(file="getsimexp2option_ran.RData")

## simexp.df$prop1 <- apply(simexp.df[,paste0("choice",1:20)],1,function(x){sum(x==1)/length(x)})

## ggsave(ggplot(simexp.df,aes(x=trialid,y=prop1,color=ppntid))+geom_line()+geom_point()+theme_bw()+facet_wrap(~(signif(Bweight,3)))+guides(color=FALSE)+ylab("p(choose_1)")+xlab("Trialid (B1 ranges 0 to 10, all others fixed at 5)"),file="simexp_choiceprop.png")

#only needed if you want to drop extra choice runs used to get choice proportions...
#simexp.df <- simexp.df%>%rename(choice=choice1)%>%select(-(choice2:choice25))
write.csv(simexp.df,file="simexp_sanschoices.csv")
