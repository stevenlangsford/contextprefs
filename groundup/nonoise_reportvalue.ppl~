var countlist = function(n){
    var countdown = function(n){//So ugly! But if you're gonna use this as an index, it makes more sense/keeps correct correspondances in count-up order.
	if(n<=0) return [];
	return [n-1].concat(countdown(n-1));
    }
    countdown(n).reverse()
}
var max = function(arr){reduce(function(a,b){if(a>b)return a; else return b;},arr[0],arr)};
var hm_ppnts = max(map(function(arow){arow["ppntid"]},datadf))+1; //ASSUMING ids start from 0. This set of helpers is only used to construct the return values from mem-d functions by walking through a countlist of ppntids.

var recoverK = function(){
    var get_k = mem(function(ppntid){
    	return beta({a:2,b:2})
    })

    var appraise = function(a,b,ppntid){
	var k = get_k(ppntid);
	return (1-k)*a+k*b;
    }
    
    var observefn = function(arow){
//	console.log(arow.value1+":"+appraise(arow.attributeA_option1,arow.attributeB_option1,arow.ppntid).x);
	observe(Gaussian({mu:appraise(arow.attributeA_option1,arow.attributeB_option1,arow.ppntid),sigma:.5}),arow.value1);
    }
    
    map(observefn,datadf)
    
    return map(get_k,countlist(hm_ppnts));
}

Infer({method:'MCMC',kernel:'HMC',samples:1000,burn:100,lag:2,model:recoverK})
