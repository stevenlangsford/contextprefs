//helper functions
var countlist = function(n){
    var countdown = function(n){//So ugly! But if you're gonna use this as an index, it makes more sense/keeps correct correspondances in count-up order.
	if(n<=0) return [				];
	return [n-1].concat(countdown(n-1));
    }
    countdown(n).reverse()
}
var max = function(arr){reduce(function(a,b){if(a>b)return a; else return b;},arr[0],arr)};
var hm_ppnts = max(map(function(arow){arow["ppntid"]},expdf))+1; //ASSUMING ids start from 0. Used to construct return values from mem-d functions by walking through a countlist of ppntids.

var writelogs = false;
var logprob = 0.001;
//if(writelogs&&flip(logprob))json.write('problogs/test'+randomInteger(1000)+'.json', {writelogs:writelogs,logprob:logprob});

//MAIN WORK, this is the model passed to Infer.
var recover_agentparams = function(){
    //ppnt attributes
    //Only calcsd inferred, others are constants.
    var getmy_calcsd = mem(function(ppntid){
	return Math.abs(cauchy({location:5,scale:2})); //a bit more realistic than the flip prior.
    });//actually, realistic priors for everyone! woo!
    var getmy_tolerance_prob = mem(function(ppntid){return uniform({a:0.01,b:0.3})});
    var getmy_tolerance_payoff = mem(function(ppntid){return uniform({a:.5,b:5})});
    var getmy_orderr = mem(function(ppntid){return uniform({a:0.05,b:0.3})});
    var getmy_payoffpriormean = mem(function(ppntid){return 20}) //return gaussian({mu:20,sigma:3})
    var getmy_payoffpriorsd = mem(function(ppntid){return 8}) //Math.abs(gaussian({mu:8,sigma:2}))


    var decision_distribution = function(arow){
	//Headscratching over placement of these calc/ordobservations.
	//I think it's important that they appear outside agent function?
	//might be nice to think more about this.
	var calcA = gaussian({mu:arow["probA"]*arow["payoffA"],sigma:getmy_calcsd(arow["ppntid"])});
	var calcB = gaussian({mu:arow["probB"]*arow["payoffB"],sigma:getmy_calcsd(arow["ppntid"])});
	var calcC = gaussian({mu:arow["probC"]*arow["payoffC"],sigma:getmy_calcsd(arow["ppntid"])});

	var ordrelation = function(a,b,tolerance,orderr){//these args are individual values...
	    if(flip(orderr)) return categorical({vs:["<","=",">"],ps:[1,1,1]});
	    if(Math.abs(a-b)<tolerance) return "=";
	    if(a>b) return ">";
	    if(a<b) return "<";
	}
	var p_AB = ordrelation(arow["probA"],arow["probB"],getmy_tolerance_prob(arow["ppntid"]),getmy_orderr(arow["ppntid"]));
	var p_AC = ordrelation(arow["probA"],arow["probC"],getmy_tolerance_prob(arow["ppntid"]),getmy_orderr(arow["ppntid"]));
	var p_BC = ordrelation(arow["probB"],arow["probC"],getmy_tolerance_prob(arow["ppntid"]),getmy_orderr(arow["ppntid"]));

	var v_AB = ordrelation(arow["payoffA"],arow["payoffB"],getmy_tolerance_payoff(arow["ppntid"]),getmy_orderr(arow["ppntid"]));
	var v_AC = ordrelation(arow["payoffA"],arow["payoffC"],getmy_tolerance_payoff(arow["ppntid"]),getmy_orderr(arow["ppntid"]));
	var v_BC = ordrelation(arow["payoffB"],arow["payoffC"],getmy_tolerance_payoff(arow["ppntid"]),getmy_orderr(arow["ppntid"]));

	if(writelogs&&flip(logprob)){ //diag
	    json.write('problogs/calcordobs'+randomInteger(10000)+'.json', {
		calcA:calcA,
		calcB:calcB,
		calcC:calcC,
		p_AB:p_AB,
		p_AC:p_AC,
		p_BC:p_BC,
		v_AB:v_AB,
		v_AC:v_AC,
		v_BC:v_BC,
		sim_pA:arow["probA"],
		sim_pB:arow["probB"],
		sim_pC:arow["probC"],
		sim_vA:arow["payoffA"],
		sim_vB:arow["payoffB"],
		sim_vC:arow["payoffC"],
		sim_ppntid:arow["ppntid"],
		est_calcsd:getmy_calcsd(arow["ppntid"])
	    });
	}//end diag
	
	var agent = function(){
	    var probPrior = Beta({a:1,b:1});
	    var  payoffPrior = Gaussian({mu:getmy_payoffpriormean(arow["ppntid"]),sigma:getmy_payoffpriorsd(arow["ppntid"])});

	    var my_pA = sample(probPrior);
	    var my_pB = sample(probPrior);
	    var my_pC = sample(probPrior);
	    var my_vA = sample(payoffPrior);
	    var my_vB = sample(payoffPrior);
	    var my_vC = sample(payoffPrior);

	    observe(Gaussian({mu:my_pA*my_vA,sigma:getmy_calcsd(arow["ppntid"])}),calcA);
	    observe(Gaussian({mu:my_pB*my_vB,sigma:getmy_calcsd(arow["ppntid"])}),calcB)
	    observe(Gaussian({mu:my_pC*my_vC,sigma:getmy_calcsd(arow["ppntid"])}),calcC);

	    condition(p_AB == ordrelation(my_pA,my_pB,getmy_tolerance_prob(arow["ppntid"]),getmy_orderr(arow["ppntid"])));
	    condition( p_AC == ordrelation(my_pA,my_pC,getmy_tolerance_prob(arow["ppntid"]),getmy_orderr(arow["ppntid"])));
	    condition( p_BC == ordrelation(my_pB,my_pC,getmy_tolerance_prob(arow["ppntid"]),getmy_orderr(arow["ppntid"])));

	    condition( v_AB == ordrelation(my_vA,my_vB,getmy_tolerance_payoff(arow["ppntid"]),getmy_orderr(arow["ppntid"])));
	    condition( v_AC == ordrelation(my_vA,my_vC,getmy_tolerance_payoff(arow["ppntid"]),getmy_orderr(arow["ppntid"])));
	    condition( v_BC == ordrelation(my_vB,my_vC,getmy_tolerance_payoff(arow["ppntid"]),getmy_orderr(arow["ppntid"])));

	    var A = my_pA*my_vA;
	    var B = my_pB*my_vB;
	    var C = my_pC*my_vC;

	    //diag
	    if(writelogs&&flip(logprob*0.1))json.write('problogs/agentEsts'+randomInteger(10000)+'.json', {
		estA:A,
		estB:B,
		estC:C,
		est_pa:my_pA,
		est_pb:my_pB,
		est_pc:my_pC,
		est_va:my_vA,
		est_vb:my_vB,
		est_vc:my_vC,
		sim_pA:arow["probA"],
		sim_pB:arow["probB"],
		sim_pC:arow["probC"],
		sim_vA:arow["payoffA"],
		sim_vB:arow["payoffB"],
		sim_vC:arow["payoffC"],
		sim_ppntid:arow["ppntid"],
		est_calcsd:getmy_calcsd(arow["ppntid"]),
		est_tolerance_prob:getmy_tolerance_prob(arow["ppntid"]),
		est_tolerance_payoff:getmy_tolerance_payoff(arow["ppntid"]),
		est_orderr:getmy_orderr(arow["ppntid"]),
		est_payoffpriormean:getmy_payoffpriormean(arow["ppntid"]),
		est_payoffpriorsd:getmy_payoffpriorsd(arow["ppntid"]),
		est_returnchoice:A>B&&A>C ? 1 : B>A&&B>C ? 2 : 3
	    });
	    //end diag
	    return A>B&&A>C ? 1 : B>A&&B>C ? 2 : 3;
	}
	
	return Infer({method:'MCMC',samples:500,burn:20,model:agent});
    }
    
    var obsfunction = function(arow){
	var my_agent = decision_distribution(arow); //don't declare and pass, when you're done printing diags, declare anon inside observe.

	//diag
	if(writelogs&&flip(logprob))json.write('problogs/decisiondist'+randomInteger(1000)+'.json', {
	    score1:my_agent.score(1),
	    score2:my_agent.score(2),
	    score3:my_agent.score(3),
	    //asobj:my_agent,
	    pA:arow["pA"],
	    pB:arow["pB"],
	    pC:arow["pC"],
	    vA:arow["vA"],
	    vB:arow["vB"],
	    vC:arow["vC"],
	    ppntid:arow["ppntid"],
	    est_calcsd:getmy_calcsd(arow["ppntid"])
	});
	//end diag
	
	observe(my_agent, arow["choice"]);
    }//end obsfunction
    
    map(obsfunction,expdf)
    
    var ret = [map(getmy_calcsd,countlist(hm_ppnts)),
	       map(getmy_tolerance_prob,countlist(hm_ppnts)),
	       map(getmy_tolerance_payoff,countlist(hm_ppnts)),
	       map(getmy_orderr,countlist(hm_ppnts))]
    return ret;
}//end recover_agentparams


Infer({method:"SMC",particles:250,rejuvSteps:2,model:recover_agentparams}); //what impact #particles & #rejuvSteps?
